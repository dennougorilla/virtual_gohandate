package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/line/line-bot-sdk-go/linebot"
)

const (
	endpoint = "https://maps.googleapis.com/maps/api/geocode/json?address="
)

type User struct {
	date     bool
	location bool
}

type Geocoding struct {
	Results []Geometry `json:"results"`
}

type Geometry struct {
	GeoRes Location `json:"geometry"`
}

type Location struct {
	Location locations `json:"location"`
}

type locations struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type Locs struct {
	Lat float64
	Lng float64
}

var (
	bot      *linebot.Client
	messages []linebot.Message
	geometry Geocoding
	key      = os.Getenv("GEOCODING_API")
	user     User
)

func main() {
	var err error
	bot, err = linebot.New(
		os.Getenv("LINE_CHANNEL_SECRET"),
		os.Getenv("LINE_CHANNEL_TOKEN"),
	)
	if err != nil {
		log.Fatal(err)
	}

	http.HandleFunc("/callback", ResponseCall)
	if err := http.ListenAndServe(":"+os.Getenv("PORT"), nil); err != nil {
		log.Fatal(err)
	}
}

func ResponseCall(w http.ResponseWriter, req *http.Request) {
	events, err := bot.ParseRequest(req)
	if err != nil {
		if err == linebot.ErrInvalidSignature {
			w.WriteHeader(400)
		} else {
			w.WriteHeader(500)
		}
		return
	}
	for _, event := range events {
		switch event.Type {
		case linebot.EventTypeMessage:
			switch message := event.Message.(type) {
			case *linebot.TextMessage:
				switch message.Text {
				case "„ÅîÈ£ØË°å„Åã„Å™„ÅÑÔºü":
					if _, err = bot.ReplyMessage(event.ReplyToken,
						linebot.NewTextMessage("Ë°å„Åç„Åü„ÅÑÔºÅË°å„Åç„Åü„ÅÑÔºÅ"),
						ButtonTemplate2("https://i.imgur.com/tNxL35o.png", //<-Â§âÊõ¥
							"Ë°å„Åè",
							"Ë°å„Åã„Å™„ÅÑ",
							"„Åó„Åä„Åà„Å£„Å¶„ÅäÂ∫óË°å„Å£„Å¶„Åø„Åü„ÅÑ„Å™„ÅÅ‚ô™",
							" ",
							"1",
							"2",
						)).Do(); err != nil {
						log.Print(err)
					}
				case "„ÅÑ„Åü„Å†„Åç„Åæ„ÅôÔºÅ":
					if _, err = bot.ReplyMessage(event.ReplyToken,
						ButtonTemplate("https://i.imgur.com/97XRjTa.png", //<-Â§âÊõ¥
							"„ÅÑ„Åü„Å†„Åç„Åæ„Åô‚ô™",
						)).Do(); err != nil {
						log.Print(err)
					}

				case "„Åî„Å°„Åù„ÅÜ„Åï„ÅæÔºÅ":
					if _, err = bot.ReplyMessage(event.ReplyToken,
						linebot.NewTextMessage("„Åî„Å°„Åù„ÅÜ„Åï„Åæ„Åß„Åó„Åü"),
						ReviewTemplate("https://i.imgur.com/oxoKeI5.png"), //<-Â§âÊõ¥
					).Do(); err != nil {
						log.Print(err)
					}

				case "„ÅäË©±„Åó„Åó„Çà„ÅÜÔºÅ":
				default:
				}
			case *linebot.LocationMessage:
				LocationRes(message, event)
			}

		case linebot.EventTypePostback:
			switch event.Postback.Data {
			case "1":
				user.date = true
				if _, err = bot.ReplyMessage(event.ReplyToken,
					linebot.NewTextMessage("„ÇÑ„Å£„Åü„ÅÅÔºÅ"),
					linebot.NewTextMessage("„Å§„ÅÑ„Åü„ÇâÊïô„Åà„Å¶„Å≠‚ô™"),
				).Do(); err != nil {
					log.Print(err)
				}

			case "2":
				if _, err = bot.ReplyMessage(event.ReplyToken, linebot.NewTextMessage("„Åù„Å£„Åã„ÅÅ...ÊÆãÂøµ„ÄÇ„ÄÇ„ÄÇ")).Do(); err != nil {
					log.Print(err)
				}

			case "3":
				if _, err = bot.ReplyMessage(event.ReplyToken,
					CarouselTemplate()).Do(); err != nil {
					log.Print(err)
				}

			case "4":
				if _, err = bot.ReplyMessage(event.ReplyToken, linebot.NewTextMessage("‰∫ÜËß£‚ô™")).Do(); err != nil {
					log.Print(err)
				}

			case "5":
				if _, err = bot.ReplyMessage(event.ReplyToken,
					linebot.NewTextMessage("„Åä„ÅâÔºÅËâØ„ÅÑ„Å≠‚ô™\nÁßÅ„ÇÇ„ÇΩ„Éº„Çπ„Ç´„ÉÑ‰∏º„Å´„Åó„Çà„ÅÜÔºÅ"),
				).Do(); err != nil {
					log.Print(err)
				}
			case "6":
				if _, err = bot.ReplyMessage(event.ReplyToken,
					linebot.NewTextMessage("„Åä„ÅâÔºÅËâØ„ÅÑ„Å≠‚ô™\nÁßÅ„ÇÇÂë≥Âôå„ÉÅ„É£„Éº„Ç∑„É•„Éº„Å´„Åó„Çà„ÅÜÔºÅ"),
				).Do(); err != nil {
					log.Print(err)
				}
			case "7":
				if _, err = bot.ReplyMessage(event.ReplyToken,
					linebot.NewTextMessage("„Åæ„Åü„ÄÅÊù•„Çà„ÅÜ„Å≠ÔºÅÔºÅ"),
				).Do(); err != nil {
					log.Print(err)
				}
			default:
			}
		}
	}
}

func CarouselTemplate() *linebot.TemplateMessage {
	template := linebot.NewCarouselTemplate(
		linebot.NewCarouselColumn(
			"https://img.retty.me/img_repo/l/01/11709105.jpg",
			"Âë≥„ÅÆÈáå„ÄÄ„Åó„Åä„Åà",
			"„ÇΩ„Éº„Çπ„Ç´„ÉÑ‰∏º",
			linebot.NewPostbackTemplateAction("„Åì„Çå„Å´„Åô„Çã!", "5", ""),
		),
		linebot.NewCarouselColumn(
			"https://i.imgur.com/9Oam9dS.jpg",
			"Âë≥„ÅÆÈáå„ÄÄ„Åó„Åä„Åà",
			"Âë≥Âôå„ÉÅ„É£„Éº„Ç∑„É•„Éº",
			linebot.NewPostbackTemplateAction("„Åì„Çå„Å´„Åô„Çã!", "6", ""),
		),
	)

	msg := linebot.NewTemplateMessage("carousel", template)
	return msg
}

func ButtonTemplate(image, title string) *linebot.TemplateMessage {
	template := linebot.NewButtonsTemplate(
		image, //not image
		title, //ButtonsTemplate Title
		" ",   //ButtonsTemplate SubTitle
		linebot.NewPostbackTemplateAction(" ", " ", ""),
	)
	msg := linebot.NewTemplateMessage("confilm", template)
	return msg
}

func ButtonTemplate2(image, rb, lb, label, sublabel, no1, no2 string) *linebot.TemplateMessage {
	template := linebot.NewButtonsTemplate(
		image,    //not image
		label,    //ButtonsTemplate Title
		sublabel, //ButtonsTemplate SubTitle
		linebot.NewPostbackTemplateAction(rb, no1, ""),
		linebot.NewPostbackTemplateAction(lb, no2, ""),
	)
	msg := linebot.NewTemplateMessage("confilm", template)
	return msg
}

func ReviewTemplate(image string) *linebot.TemplateMessage {
	template := linebot.NewButtonsTemplate(
		image, //not image
		"ÁæéÂë≥„Åó„Åã„Å£„Åü„Å≠ÔºÅ\nÂë≥„ÅØ„Å©„ÅÜ„Å†„Å£„ÅüÔºü", //ButtonsTemplate Title
		" ", //ButtonsTemplate SubTitle
		linebot.NewPostbackTemplateAction("‚òÖ‚òÜ‚òÜ‚òÜ", "7", ""),
		linebot.NewPostbackTemplateAction("‚òÖ‚òÖ‚òÜ‚òÜ", "7", ""),
		linebot.NewPostbackTemplateAction("‚òÖ‚òÖ‚òÖ‚òÜ", "7", ""),
		linebot.NewPostbackTemplateAction("‚òÖ‚òÖ‚òÖ‚òÖ", "7", ""),
	)
	msg := linebot.NewTemplateMessage("confilm", template)
	return msg
}

func GetConfirmData(rb, lb, label string) *linebot.TemplateMessage {
	rbutton := linebot.NewPostbackTemplateAction(rb, "1", "")
	lbutton := linebot.NewPostbackTemplateAction(lb, "2", "")

	temp := linebot.NewConfirmTemplate(label, rbutton, lbutton)
	msg := linebot.NewTemplateMessage("confilm-gohan", temp)

	return msg
}

func LocationRes(message *linebot.LocationMessage, event *linebot.Event) {
	loc := "ÔºìÔºëÔºôÂæ°Â±±Êùë‰∏äÈñÄÁî∞Áî∫Â§ßÂ≠ó‰ºöÊ¥•Ëã•ÊùæÂ∏ÇÁ¶èÂ≥∂Áúå"
	url := endpoint + loc + "&key=" + key
	if err := GeometReq(url); err != nil {
		log.Print(err)
	}

	la := strconv.FormatFloat(message.Latitude, 'f', 6, 64)
	lo := strconv.FormatFloat(message.Longitude, 'f', 6, 64)
	lat, _ := strconv.ParseFloat(la, 64)
	lon, _ := strconv.ParseFloat(lo, 64)

	max := Locs{}
	min := Locs{}
	max.Lat = geometry.Results[0].GeoRes.Location.Lat + 0.0040000
	max.Lng = geometry.Results[0].GeoRes.Location.Lng + 0.0020000

	min.Lat = geometry.Results[0].GeoRes.Location.Lat - 0.0040000
	min.Lng = geometry.Results[0].GeoRes.Location.Lng - 0.0020000

	if (lat >= min.Lat && lat <= max.Lat) && (lon >= min.Lng && lon <= max.Lng) {
		if _, err := bot.ReplyMessage(event.ReplyToken,
			linebot.NewTextMessage("ÂæÖ„Å£„Å¶„Åü„Çà„Äú„Äú"),
			ButtonTemplate2("https://i.imgur.com/AZ9L8d6.png", //<-Â§âÊõ¥
				"ËÅû„Åè",
				"ËÅû„Åã„Å™„ÅÑ",
				"ÂæÖ„Å£„Å¶„Åü„Çà„Äú„Äú„ÄÅ„ÅäËÖπ„Åô„ÅÑ„Å°„ÇÉ„Å£„ÅüüòÇ",
				"„Ç™„Çπ„Çπ„É°„ÇíËÅû„ÅèÔºüËÅû„Åã„Å™„ÅÑÔºü",
				"3",
				"4",
			),
		).Do(); err != nil {
			log.Print(err)
		}
	} else {
		if _, err := bot.ReplyMessage(event.ReplyToken, linebot.NewTextMessage("Âòò„Å§„ÅçÔºÅ\nÂÖ®ÁÑ∂ÈÅï„ÅÜÂ†¥ÊâÄ„Åò„ÇÉ„Å™„ÅÑÔºÅÔºÅ")).Do(); err != nil {
			log.Print(err)
		}
	}

}

func GeometReq(url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	err = json.Unmarshal(respBody, &geometry)
	if err != nil {
		return err
	}

	return nil
}
